// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flexprice/flexprice/ent/addonassociation"
	"github.com/flexprice/flexprice/ent/predicate"
)

// AddonAssociationUpdate is the builder for updating AddonAssociation entities.
type AddonAssociationUpdate struct {
	config
	hooks    []Hook
	mutation *AddonAssociationMutation
}

// Where appends a list predicates to the AddonAssociationUpdate builder.
func (aau *AddonAssociationUpdate) Where(ps ...predicate.AddonAssociation) *AddonAssociationUpdate {
	aau.mutation.Where(ps...)
	return aau
}

// SetStatus sets the "status" field.
func (aau *AddonAssociationUpdate) SetStatus(s string) *AddonAssociationUpdate {
	aau.mutation.SetStatus(s)
	return aau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aau *AddonAssociationUpdate) SetNillableStatus(s *string) *AddonAssociationUpdate {
	if s != nil {
		aau.SetStatus(*s)
	}
	return aau
}

// SetUpdatedAt sets the "updated_at" field.
func (aau *AddonAssociationUpdate) SetUpdatedAt(t time.Time) *AddonAssociationUpdate {
	aau.mutation.SetUpdatedAt(t)
	return aau
}

// SetUpdatedBy sets the "updated_by" field.
func (aau *AddonAssociationUpdate) SetUpdatedBy(s string) *AddonAssociationUpdate {
	aau.mutation.SetUpdatedBy(s)
	return aau
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (aau *AddonAssociationUpdate) SetNillableUpdatedBy(s *string) *AddonAssociationUpdate {
	if s != nil {
		aau.SetUpdatedBy(*s)
	}
	return aau
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (aau *AddonAssociationUpdate) ClearUpdatedBy() *AddonAssociationUpdate {
	aau.mutation.ClearUpdatedBy()
	return aau
}

// SetStartDate sets the "start_date" field.
func (aau *AddonAssociationUpdate) SetStartDate(t time.Time) *AddonAssociationUpdate {
	aau.mutation.SetStartDate(t)
	return aau
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (aau *AddonAssociationUpdate) SetNillableStartDate(t *time.Time) *AddonAssociationUpdate {
	if t != nil {
		aau.SetStartDate(*t)
	}
	return aau
}

// ClearStartDate clears the value of the "start_date" field.
func (aau *AddonAssociationUpdate) ClearStartDate() *AddonAssociationUpdate {
	aau.mutation.ClearStartDate()
	return aau
}

// SetEndDate sets the "end_date" field.
func (aau *AddonAssociationUpdate) SetEndDate(t time.Time) *AddonAssociationUpdate {
	aau.mutation.SetEndDate(t)
	return aau
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (aau *AddonAssociationUpdate) SetNillableEndDate(t *time.Time) *AddonAssociationUpdate {
	if t != nil {
		aau.SetEndDate(*t)
	}
	return aau
}

// ClearEndDate clears the value of the "end_date" field.
func (aau *AddonAssociationUpdate) ClearEndDate() *AddonAssociationUpdate {
	aau.mutation.ClearEndDate()
	return aau
}

// SetAddonStatus sets the "addon_status" field.
func (aau *AddonAssociationUpdate) SetAddonStatus(s string) *AddonAssociationUpdate {
	aau.mutation.SetAddonStatus(s)
	return aau
}

// SetNillableAddonStatus sets the "addon_status" field if the given value is not nil.
func (aau *AddonAssociationUpdate) SetNillableAddonStatus(s *string) *AddonAssociationUpdate {
	if s != nil {
		aau.SetAddonStatus(*s)
	}
	return aau
}

// SetCancellationReason sets the "cancellation_reason" field.
func (aau *AddonAssociationUpdate) SetCancellationReason(s string) *AddonAssociationUpdate {
	aau.mutation.SetCancellationReason(s)
	return aau
}

// SetNillableCancellationReason sets the "cancellation_reason" field if the given value is not nil.
func (aau *AddonAssociationUpdate) SetNillableCancellationReason(s *string) *AddonAssociationUpdate {
	if s != nil {
		aau.SetCancellationReason(*s)
	}
	return aau
}

// ClearCancellationReason clears the value of the "cancellation_reason" field.
func (aau *AddonAssociationUpdate) ClearCancellationReason() *AddonAssociationUpdate {
	aau.mutation.ClearCancellationReason()
	return aau
}

// SetCancelledAt sets the "cancelled_at" field.
func (aau *AddonAssociationUpdate) SetCancelledAt(t time.Time) *AddonAssociationUpdate {
	aau.mutation.SetCancelledAt(t)
	return aau
}

// SetNillableCancelledAt sets the "cancelled_at" field if the given value is not nil.
func (aau *AddonAssociationUpdate) SetNillableCancelledAt(t *time.Time) *AddonAssociationUpdate {
	if t != nil {
		aau.SetCancelledAt(*t)
	}
	return aau
}

// ClearCancelledAt clears the value of the "cancelled_at" field.
func (aau *AddonAssociationUpdate) ClearCancelledAt() *AddonAssociationUpdate {
	aau.mutation.ClearCancelledAt()
	return aau
}

// SetMetadata sets the "metadata" field.
func (aau *AddonAssociationUpdate) SetMetadata(m map[string]interface{}) *AddonAssociationUpdate {
	aau.mutation.SetMetadata(m)
	return aau
}

// ClearMetadata clears the value of the "metadata" field.
func (aau *AddonAssociationUpdate) ClearMetadata() *AddonAssociationUpdate {
	aau.mutation.ClearMetadata()
	return aau
}

// Mutation returns the AddonAssociationMutation object of the builder.
func (aau *AddonAssociationUpdate) Mutation() *AddonAssociationMutation {
	return aau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aau *AddonAssociationUpdate) Save(ctx context.Context) (int, error) {
	aau.defaults()
	return withHooks(ctx, aau.sqlSave, aau.mutation, aau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aau *AddonAssociationUpdate) SaveX(ctx context.Context) int {
	affected, err := aau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aau *AddonAssociationUpdate) Exec(ctx context.Context) error {
	_, err := aau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aau *AddonAssociationUpdate) ExecX(ctx context.Context) {
	if err := aau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aau *AddonAssociationUpdate) defaults() {
	if _, ok := aau.mutation.UpdatedAt(); !ok {
		v := addonassociation.UpdateDefaultUpdatedAt()
		aau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aau *AddonAssociationUpdate) check() error {
	if v, ok := aau.mutation.AddonStatus(); ok {
		if err := addonassociation.AddonStatusValidator(v); err != nil {
			return &ValidationError{Name: "addon_status", err: fmt.Errorf(`ent: validator failed for field "AddonAssociation.addon_status": %w`, err)}
		}
	}
	return nil
}

func (aau *AddonAssociationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(addonassociation.Table, addonassociation.Columns, sqlgraph.NewFieldSpec(addonassociation.FieldID, field.TypeString))
	if ps := aau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aau.mutation.Status(); ok {
		_spec.SetField(addonassociation.FieldStatus, field.TypeString, value)
	}
	if value, ok := aau.mutation.UpdatedAt(); ok {
		_spec.SetField(addonassociation.FieldUpdatedAt, field.TypeTime, value)
	}
	if aau.mutation.CreatedByCleared() {
		_spec.ClearField(addonassociation.FieldCreatedBy, field.TypeString)
	}
	if value, ok := aau.mutation.UpdatedBy(); ok {
		_spec.SetField(addonassociation.FieldUpdatedBy, field.TypeString, value)
	}
	if aau.mutation.UpdatedByCleared() {
		_spec.ClearField(addonassociation.FieldUpdatedBy, field.TypeString)
	}
	if aau.mutation.EnvironmentIDCleared() {
		_spec.ClearField(addonassociation.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := aau.mutation.StartDate(); ok {
		_spec.SetField(addonassociation.FieldStartDate, field.TypeTime, value)
	}
	if aau.mutation.StartDateCleared() {
		_spec.ClearField(addonassociation.FieldStartDate, field.TypeTime)
	}
	if value, ok := aau.mutation.EndDate(); ok {
		_spec.SetField(addonassociation.FieldEndDate, field.TypeTime, value)
	}
	if aau.mutation.EndDateCleared() {
		_spec.ClearField(addonassociation.FieldEndDate, field.TypeTime)
	}
	if value, ok := aau.mutation.AddonStatus(); ok {
		_spec.SetField(addonassociation.FieldAddonStatus, field.TypeString, value)
	}
	if value, ok := aau.mutation.CancellationReason(); ok {
		_spec.SetField(addonassociation.FieldCancellationReason, field.TypeString, value)
	}
	if aau.mutation.CancellationReasonCleared() {
		_spec.ClearField(addonassociation.FieldCancellationReason, field.TypeString)
	}
	if value, ok := aau.mutation.CancelledAt(); ok {
		_spec.SetField(addonassociation.FieldCancelledAt, field.TypeTime, value)
	}
	if aau.mutation.CancelledAtCleared() {
		_spec.ClearField(addonassociation.FieldCancelledAt, field.TypeTime)
	}
	if value, ok := aau.mutation.Metadata(); ok {
		_spec.SetField(addonassociation.FieldMetadata, field.TypeJSON, value)
	}
	if aau.mutation.MetadataCleared() {
		_spec.ClearField(addonassociation.FieldMetadata, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{addonassociation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aau.mutation.done = true
	return n, nil
}

// AddonAssociationUpdateOne is the builder for updating a single AddonAssociation entity.
type AddonAssociationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AddonAssociationMutation
}

// SetStatus sets the "status" field.
func (aauo *AddonAssociationUpdateOne) SetStatus(s string) *AddonAssociationUpdateOne {
	aauo.mutation.SetStatus(s)
	return aauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aauo *AddonAssociationUpdateOne) SetNillableStatus(s *string) *AddonAssociationUpdateOne {
	if s != nil {
		aauo.SetStatus(*s)
	}
	return aauo
}

// SetUpdatedAt sets the "updated_at" field.
func (aauo *AddonAssociationUpdateOne) SetUpdatedAt(t time.Time) *AddonAssociationUpdateOne {
	aauo.mutation.SetUpdatedAt(t)
	return aauo
}

// SetUpdatedBy sets the "updated_by" field.
func (aauo *AddonAssociationUpdateOne) SetUpdatedBy(s string) *AddonAssociationUpdateOne {
	aauo.mutation.SetUpdatedBy(s)
	return aauo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (aauo *AddonAssociationUpdateOne) SetNillableUpdatedBy(s *string) *AddonAssociationUpdateOne {
	if s != nil {
		aauo.SetUpdatedBy(*s)
	}
	return aauo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (aauo *AddonAssociationUpdateOne) ClearUpdatedBy() *AddonAssociationUpdateOne {
	aauo.mutation.ClearUpdatedBy()
	return aauo
}

// SetStartDate sets the "start_date" field.
func (aauo *AddonAssociationUpdateOne) SetStartDate(t time.Time) *AddonAssociationUpdateOne {
	aauo.mutation.SetStartDate(t)
	return aauo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (aauo *AddonAssociationUpdateOne) SetNillableStartDate(t *time.Time) *AddonAssociationUpdateOne {
	if t != nil {
		aauo.SetStartDate(*t)
	}
	return aauo
}

// ClearStartDate clears the value of the "start_date" field.
func (aauo *AddonAssociationUpdateOne) ClearStartDate() *AddonAssociationUpdateOne {
	aauo.mutation.ClearStartDate()
	return aauo
}

// SetEndDate sets the "end_date" field.
func (aauo *AddonAssociationUpdateOne) SetEndDate(t time.Time) *AddonAssociationUpdateOne {
	aauo.mutation.SetEndDate(t)
	return aauo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (aauo *AddonAssociationUpdateOne) SetNillableEndDate(t *time.Time) *AddonAssociationUpdateOne {
	if t != nil {
		aauo.SetEndDate(*t)
	}
	return aauo
}

// ClearEndDate clears the value of the "end_date" field.
func (aauo *AddonAssociationUpdateOne) ClearEndDate() *AddonAssociationUpdateOne {
	aauo.mutation.ClearEndDate()
	return aauo
}

// SetAddonStatus sets the "addon_status" field.
func (aauo *AddonAssociationUpdateOne) SetAddonStatus(s string) *AddonAssociationUpdateOne {
	aauo.mutation.SetAddonStatus(s)
	return aauo
}

// SetNillableAddonStatus sets the "addon_status" field if the given value is not nil.
func (aauo *AddonAssociationUpdateOne) SetNillableAddonStatus(s *string) *AddonAssociationUpdateOne {
	if s != nil {
		aauo.SetAddonStatus(*s)
	}
	return aauo
}

// SetCancellationReason sets the "cancellation_reason" field.
func (aauo *AddonAssociationUpdateOne) SetCancellationReason(s string) *AddonAssociationUpdateOne {
	aauo.mutation.SetCancellationReason(s)
	return aauo
}

// SetNillableCancellationReason sets the "cancellation_reason" field if the given value is not nil.
func (aauo *AddonAssociationUpdateOne) SetNillableCancellationReason(s *string) *AddonAssociationUpdateOne {
	if s != nil {
		aauo.SetCancellationReason(*s)
	}
	return aauo
}

// ClearCancellationReason clears the value of the "cancellation_reason" field.
func (aauo *AddonAssociationUpdateOne) ClearCancellationReason() *AddonAssociationUpdateOne {
	aauo.mutation.ClearCancellationReason()
	return aauo
}

// SetCancelledAt sets the "cancelled_at" field.
func (aauo *AddonAssociationUpdateOne) SetCancelledAt(t time.Time) *AddonAssociationUpdateOne {
	aauo.mutation.SetCancelledAt(t)
	return aauo
}

// SetNillableCancelledAt sets the "cancelled_at" field if the given value is not nil.
func (aauo *AddonAssociationUpdateOne) SetNillableCancelledAt(t *time.Time) *AddonAssociationUpdateOne {
	if t != nil {
		aauo.SetCancelledAt(*t)
	}
	return aauo
}

// ClearCancelledAt clears the value of the "cancelled_at" field.
func (aauo *AddonAssociationUpdateOne) ClearCancelledAt() *AddonAssociationUpdateOne {
	aauo.mutation.ClearCancelledAt()
	return aauo
}

// SetMetadata sets the "metadata" field.
func (aauo *AddonAssociationUpdateOne) SetMetadata(m map[string]interface{}) *AddonAssociationUpdateOne {
	aauo.mutation.SetMetadata(m)
	return aauo
}

// ClearMetadata clears the value of the "metadata" field.
func (aauo *AddonAssociationUpdateOne) ClearMetadata() *AddonAssociationUpdateOne {
	aauo.mutation.ClearMetadata()
	return aauo
}

// Mutation returns the AddonAssociationMutation object of the builder.
func (aauo *AddonAssociationUpdateOne) Mutation() *AddonAssociationMutation {
	return aauo.mutation
}

// Where appends a list predicates to the AddonAssociationUpdate builder.
func (aauo *AddonAssociationUpdateOne) Where(ps ...predicate.AddonAssociation) *AddonAssociationUpdateOne {
	aauo.mutation.Where(ps...)
	return aauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aauo *AddonAssociationUpdateOne) Select(field string, fields ...string) *AddonAssociationUpdateOne {
	aauo.fields = append([]string{field}, fields...)
	return aauo
}

// Save executes the query and returns the updated AddonAssociation entity.
func (aauo *AddonAssociationUpdateOne) Save(ctx context.Context) (*AddonAssociation, error) {
	aauo.defaults()
	return withHooks(ctx, aauo.sqlSave, aauo.mutation, aauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aauo *AddonAssociationUpdateOne) SaveX(ctx context.Context) *AddonAssociation {
	node, err := aauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aauo *AddonAssociationUpdateOne) Exec(ctx context.Context) error {
	_, err := aauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aauo *AddonAssociationUpdateOne) ExecX(ctx context.Context) {
	if err := aauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aauo *AddonAssociationUpdateOne) defaults() {
	if _, ok := aauo.mutation.UpdatedAt(); !ok {
		v := addonassociation.UpdateDefaultUpdatedAt()
		aauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aauo *AddonAssociationUpdateOne) check() error {
	if v, ok := aauo.mutation.AddonStatus(); ok {
		if err := addonassociation.AddonStatusValidator(v); err != nil {
			return &ValidationError{Name: "addon_status", err: fmt.Errorf(`ent: validator failed for field "AddonAssociation.addon_status": %w`, err)}
		}
	}
	return nil
}

func (aauo *AddonAssociationUpdateOne) sqlSave(ctx context.Context) (_node *AddonAssociation, err error) {
	if err := aauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(addonassociation.Table, addonassociation.Columns, sqlgraph.NewFieldSpec(addonassociation.FieldID, field.TypeString))
	id, ok := aauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AddonAssociation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, addonassociation.FieldID)
		for _, f := range fields {
			if !addonassociation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != addonassociation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aauo.mutation.Status(); ok {
		_spec.SetField(addonassociation.FieldStatus, field.TypeString, value)
	}
	if value, ok := aauo.mutation.UpdatedAt(); ok {
		_spec.SetField(addonassociation.FieldUpdatedAt, field.TypeTime, value)
	}
	if aauo.mutation.CreatedByCleared() {
		_spec.ClearField(addonassociation.FieldCreatedBy, field.TypeString)
	}
	if value, ok := aauo.mutation.UpdatedBy(); ok {
		_spec.SetField(addonassociation.FieldUpdatedBy, field.TypeString, value)
	}
	if aauo.mutation.UpdatedByCleared() {
		_spec.ClearField(addonassociation.FieldUpdatedBy, field.TypeString)
	}
	if aauo.mutation.EnvironmentIDCleared() {
		_spec.ClearField(addonassociation.FieldEnvironmentID, field.TypeString)
	}
	if value, ok := aauo.mutation.StartDate(); ok {
		_spec.SetField(addonassociation.FieldStartDate, field.TypeTime, value)
	}
	if aauo.mutation.StartDateCleared() {
		_spec.ClearField(addonassociation.FieldStartDate, field.TypeTime)
	}
	if value, ok := aauo.mutation.EndDate(); ok {
		_spec.SetField(addonassociation.FieldEndDate, field.TypeTime, value)
	}
	if aauo.mutation.EndDateCleared() {
		_spec.ClearField(addonassociation.FieldEndDate, field.TypeTime)
	}
	if value, ok := aauo.mutation.AddonStatus(); ok {
		_spec.SetField(addonassociation.FieldAddonStatus, field.TypeString, value)
	}
	if value, ok := aauo.mutation.CancellationReason(); ok {
		_spec.SetField(addonassociation.FieldCancellationReason, field.TypeString, value)
	}
	if aauo.mutation.CancellationReasonCleared() {
		_spec.ClearField(addonassociation.FieldCancellationReason, field.TypeString)
	}
	if value, ok := aauo.mutation.CancelledAt(); ok {
		_spec.SetField(addonassociation.FieldCancelledAt, field.TypeTime, value)
	}
	if aauo.mutation.CancelledAtCleared() {
		_spec.ClearField(addonassociation.FieldCancelledAt, field.TypeTime)
	}
	if value, ok := aauo.mutation.Metadata(); ok {
		_spec.SetField(addonassociation.FieldMetadata, field.TypeJSON, value)
	}
	if aauo.mutation.MetadataCleared() {
		_spec.ClearField(addonassociation.FieldMetadata, field.TypeJSON)
	}
	_node = &AddonAssociation{config: aauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{addonassociation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aauo.mutation.done = true
	return _node, nil
}
