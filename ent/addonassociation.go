// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/flexprice/flexprice/ent/addonassociation"
)

// AddonAssociation is the model entity for the AddonAssociation schema.
type AddonAssociation struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// EnvironmentID holds the value of the "environment_id" field.
	EnvironmentID string `json:"environment_id,omitempty"`
	// EntityID holds the value of the "entity_id" field.
	EntityID string `json:"entity_id,omitempty"`
	// EntityType holds the value of the "entity_type" field.
	EntityType string `json:"entity_type,omitempty"`
	// AddonID holds the value of the "addon_id" field.
	AddonID string `json:"addon_id,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate *time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate *time.Time `json:"end_date,omitempty"`
	// AddonStatus holds the value of the "addon_status" field.
	AddonStatus string `json:"addon_status,omitempty"`
	// CancellationReason holds the value of the "cancellation_reason" field.
	CancellationReason string `json:"cancellation_reason,omitempty"`
	// CancelledAt holds the value of the "cancelled_at" field.
	CancelledAt *time.Time `json:"cancelled_at,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata                        map[string]interface{} `json:"metadata,omitempty"`
	subscription_addon_associations *string
	selectValues                    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AddonAssociation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case addonassociation.FieldMetadata:
			values[i] = new([]byte)
		case addonassociation.FieldID, addonassociation.FieldTenantID, addonassociation.FieldStatus, addonassociation.FieldCreatedBy, addonassociation.FieldUpdatedBy, addonassociation.FieldEnvironmentID, addonassociation.FieldEntityID, addonassociation.FieldEntityType, addonassociation.FieldAddonID, addonassociation.FieldAddonStatus, addonassociation.FieldCancellationReason:
			values[i] = new(sql.NullString)
		case addonassociation.FieldCreatedAt, addonassociation.FieldUpdatedAt, addonassociation.FieldStartDate, addonassociation.FieldEndDate, addonassociation.FieldCancelledAt:
			values[i] = new(sql.NullTime)
		case addonassociation.ForeignKeys[0]: // subscription_addon_associations
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AddonAssociation fields.
func (aa *AddonAssociation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case addonassociation.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				aa.ID = value.String
			}
		case addonassociation.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				aa.TenantID = value.String
			}
		case addonassociation.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				aa.Status = value.String
			}
		case addonassociation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				aa.CreatedAt = value.Time
			}
		case addonassociation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				aa.UpdatedAt = value.Time
			}
		case addonassociation.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				aa.CreatedBy = value.String
			}
		case addonassociation.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				aa.UpdatedBy = value.String
			}
		case addonassociation.FieldEnvironmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field environment_id", values[i])
			} else if value.Valid {
				aa.EnvironmentID = value.String
			}
		case addonassociation.FieldEntityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				aa.EntityID = value.String
			}
		case addonassociation.FieldEntityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_type", values[i])
			} else if value.Valid {
				aa.EntityType = value.String
			}
		case addonassociation.FieldAddonID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field addon_id", values[i])
			} else if value.Valid {
				aa.AddonID = value.String
			}
		case addonassociation.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				aa.StartDate = new(time.Time)
				*aa.StartDate = value.Time
			}
		case addonassociation.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				aa.EndDate = new(time.Time)
				*aa.EndDate = value.Time
			}
		case addonassociation.FieldAddonStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field addon_status", values[i])
			} else if value.Valid {
				aa.AddonStatus = value.String
			}
		case addonassociation.FieldCancellationReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cancellation_reason", values[i])
			} else if value.Valid {
				aa.CancellationReason = value.String
			}
		case addonassociation.FieldCancelledAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field cancelled_at", values[i])
			} else if value.Valid {
				aa.CancelledAt = new(time.Time)
				*aa.CancelledAt = value.Time
			}
		case addonassociation.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &aa.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case addonassociation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subscription_addon_associations", values[i])
			} else if value.Valid {
				aa.subscription_addon_associations = new(string)
				*aa.subscription_addon_associations = value.String
			}
		default:
			aa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AddonAssociation.
// This includes values selected through modifiers, order, etc.
func (aa *AddonAssociation) Value(name string) (ent.Value, error) {
	return aa.selectValues.Get(name)
}

// Update returns a builder for updating this AddonAssociation.
// Note that you need to call AddonAssociation.Unwrap() before calling this method if this AddonAssociation
// was returned from a transaction, and the transaction was committed or rolled back.
func (aa *AddonAssociation) Update() *AddonAssociationUpdateOne {
	return NewAddonAssociationClient(aa.config).UpdateOne(aa)
}

// Unwrap unwraps the AddonAssociation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aa *AddonAssociation) Unwrap() *AddonAssociation {
	_tx, ok := aa.config.driver.(*txDriver)
	if !ok {
		panic("ent: AddonAssociation is not a transactional entity")
	}
	aa.config.driver = _tx.drv
	return aa
}

// String implements the fmt.Stringer.
func (aa *AddonAssociation) String() string {
	var builder strings.Builder
	builder.WriteString("AddonAssociation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", aa.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(aa.TenantID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(aa.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(aa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(aa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(aa.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(aa.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("environment_id=")
	builder.WriteString(aa.EnvironmentID)
	builder.WriteString(", ")
	builder.WriteString("entity_id=")
	builder.WriteString(aa.EntityID)
	builder.WriteString(", ")
	builder.WriteString("entity_type=")
	builder.WriteString(aa.EntityType)
	builder.WriteString(", ")
	builder.WriteString("addon_id=")
	builder.WriteString(aa.AddonID)
	builder.WriteString(", ")
	if v := aa.StartDate; v != nil {
		builder.WriteString("start_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := aa.EndDate; v != nil {
		builder.WriteString("end_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("addon_status=")
	builder.WriteString(aa.AddonStatus)
	builder.WriteString(", ")
	builder.WriteString("cancellation_reason=")
	builder.WriteString(aa.CancellationReason)
	builder.WriteString(", ")
	if v := aa.CancelledAt; v != nil {
		builder.WriteString("cancelled_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", aa.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// AddonAssociations is a parsable slice of AddonAssociation.
type AddonAssociations []*AddonAssociation
